public class Solution{
    /*
     * 1.Popular value:given a sorted array, find the value that occurs more than n/k(or n/4) times;
     */
    public List<Integer> popularValue(int[] nums, int k){
      if(nums==null||nums.length==0){
           return null;
      }
      List<Integer> res=new ArrayList<Integer>();
      int range=nums.length/k;
      int start=0;
      int end=range;
      while(start<end&&end<nums.length){
          if(nums[start]==nums[end]){
             if(start==0||nums[start]!=nums[start-1]){
              res.add(nums[start]);
             }
               start=end+1;
          }else{
              start=searchFirstIndex(nums,start,end);
          }
           end=start+range;
      }
      return res;
    }
    public int searchFirstIndex(int[] nums, int first, int last){
      int target=nums[last];
      while(first<last){
        int mid=(first+last)/2;
        if(nums[mid]>=target){
          last=mid-1;
        }else{
          first=mid+1;
        }
      }
      return nums[last]!=target?last+1:last;
    }
    
    --------------------------------------------------------------------------------------------------------------------
     /*
     *2. Missing ranges(leetcode) . Given [lower, upper],return all missing ranges
     */
        // Part 1.if it has a bunch of duplicates, see commented code
        /time:o(n)
    public List<String> findMissingRanges(int[] nums, int lower, int upper) {
        List<String> res=new ArrayList<String>();
        if(nums==null){
            return res;
        }
        //!!if empty, must add lower, upper!
        if(nums.length==0){
            //lower=1,upper=1, then (0,2) so we get [1]
            addRange(lower-1,upper+1,res);
            return res;
        }
        addRange(lower-1,nums[0],res);
        for(int i=1;i<nums.length;i++){
            if(nums[i]>nums[i-1]+1){
                addRange(nums[i-1],nums[i],res);
            }
        }
        addRange(nums[nums.length-1],upper+1,res);
        return res;
    }
      public void addRange(int a, int b,List<String> res){
           if(b>a+1){
                StringBuilder temp=new StringBuilder();
                temp.append(a+1);
                if(a+2<b){
                    temp.append("->");
                    temp.append(b-1);
                }
               res.add(temp.toString());
           }
    }
     //Part 2. A lot of duplicates and the length is much greater than the range
       public List<String> findMissingRanges(int[] nums, int lower, int upper) {
	        List<String> res=new ArrayList<String>();
	        if(nums==null){
	            return res;
	        }
	        //!!if empty, must add lower, upper!
	        if(nums.length==0){
	            //lower=1,upper=1, then (0,2) so we get [1]
	            addRange(lower-1,upper+1,res);
	            return res;
	        }
	        addRange(lower-1,nums[0],res);
	        getRange(nums,res);
	        addRange(nums[nums.length-1],upper+1,res);
	        return res;
	    }
	     public void getRange(int[] nums,List<String> res){
	           for(int i=nums[0];i<=nums[nums.length-1];i++){
	             int first=0;
	             int last=nums.length-1;
	             while(first<last){
	                 int mid=(first+last)/2;
	                 if(nums[mid]>=i){
	                     last=mid-1;
	                 }else{
	                     first=mid+1;
	                 }
	             }
	             last=(last<0||nums[last]!=i)?last+1:last;
	             if(last<nums.length&&last-1>=0&&nums[last]==i){
	                 addRange(nums[last-1],nums[last],res);
	             }
	          }
	    }
	    public void addRange(int a, int b,List<String> res){
	           if(b>a+1){
	                StringBuilder temp=new StringBuilder();
	                temp.append(a+1);
	                if(a+2<b){
	                    temp.append("->");
	                    temp.append(b-1);
	                }
	               res.add(temp.toString());
	           }
	    }
	    
  --------------------------------------------------------------------------------------------------------------------
  
        /*
	 * find longest consecutive substring. similar to word break
	 */
	public int findLenOfConsecutive(int[][] matrix){
		if(matrix==null||matrix.length==0){
			return 0;
		}
		boolean[][]visited=new boolean[matrix.length][matrix[0].length];
		int max=Integer.MIN_VALUE;
		for(int i=0;i<matrix.length;i++){
			for(int j=0;j<matrix[0].length;j++){
				max=Math.max(max, findLen(matrix,i,j,matrix[i][j],visited));
			}
		}
	  return max;	
	}
	public int findLen(int[][] matrix,int i, int j,int val,boolean[][]visited){
		
		int max=0;
		if(i>=0&&i<matrix.length&&j>=0&&j<matrix[0].length&&!visited[i][j]&&matrix[i][j]==val){
			visited[i][j]=true;
			max=Math.max(max,findLen(matrix,i-1,j,matrix[i][j]+1,visited)+1);
			max=Math.max(max,findLen(matrix,i+1,j,matrix[i][j]+1,visited)+1);
			max=Math.max(max,findLen(matrix,i,j-1,matrix[i][j]+1,visited)+1);
			max=Math.max(max,findLen(matrix,i,j+1,matrix[i][j]+1,visited)+1);
			visited[i][j]=false;
		  }
	
		return max;
	}
    
      --------------------------------------------------------------------------------------------------------------------
     /**
       *check if a string is composed of a pattern for more than 2times. ex:aacaacaac
       */
     public int[] preProcessPattern(char[] ptrn) {
	    int i = 0, j = -1;
	    int ptrnLen = ptrn.length;
	    int[] b = new int[ptrnLen + 1];
	 
	    b[i] = j;
	    while (i < ptrnLen) {            
	            while (j >= 0 && ptrn[i] != ptrn[j]) {
	            // if there is mismatch consider the next widest border
	            // The borders to be examined are obtained in decreasing order from 
	            //  the values b[i], b[b[i]] etc.
	            j = b[j];
	        }
	        i++;
	        j++;
	        b[i] = j;
	    }
	    return b;
	}
          --------------------------------------------------------------------------------------------------------------------
    
    
    
    
    
    
    
    
    
    
}
