public class Solution{
    /*
     * 1.Popular value:given a sorted array, find the value that occurs more than n/k(or n/4) times;
     */
    public List<Integer> popularValue(int[] nums, int k){
      if(nums==null||nums.length==0){
           return null;
      }
      List<Integer> res=new ArrayList<Integer>();
      int range=nums.length/k;
      int start=0;
      int end=range;
      while(start<end&&end<nums.length){
          if(nums[start]==nums[end]){
             if(start==0||nums[start]!=nums[start-1]){
              res.add(nums[start]);
             }
               start=end+1;
          }else{
              start=searchFirstIndex(nums,start,end);
          }
           end=start+range;
      }
      return res;
    }
    public int searchFirstIndex(int[] nums, int first, int last){
      int target=nums[last];
      while(first<last){
        int mid=(first+last)/2;
        if(nums[mid]>=target){
          last=mid-1;
        }else{
          first=mid+1;
        }
      }
      return nums[last]!=target?last+1:last;
    }
    
    --------------------------------------------------------------------------------------------------------------------
     /*
     *2. Missing ranges(leetcode) . Given [lower, upper],return all missing ranges
     */
        // Part 1.if it has a bunch of duplicates, see commented code
        /time:o(n)
    public List<String> findMissingRanges(int[] nums, int lower, int upper) {
        List<String> res=new ArrayList<String>();
        if(nums==null){
            return res;
        }
        //!!if empty, must add lower, upper!
        if(nums.length==0){
            //lower=1,upper=1, then (0,2) so we get [1]
            addRange(lower-1,upper+1,res);
            return res;
        }
        addRange(lower-1,nums[0],res);
        for(int i=1;i<nums.length;i++){
            if(nums[i]>nums[i-1]+1){
                addRange(nums[i-1],nums[i],res);
            }
        }
        addRange(nums[nums.length-1],upper+1,res);
        return res;
    }
      public void addRange(int a, int b,List<String> res){
           if(b>a+1){
                StringBuilder temp=new StringBuilder();
                temp.append(a+1);
                if(a+2<b){
                    temp.append("->");
                    temp.append(b-1);
                }
               res.add(temp.toString());
           }
    }
     //Part 2. A lot of duplicates and the length is much greater than the range
       public List<String> findMissingRanges(int[] nums, int lower, int upper) {
	        List<String> res=new ArrayList<String>();
	        if(nums==null){
	            return res;
	        }
	        //!!if empty, must add lower, upper!
	        if(nums.length==0){
	            //lower=1,upper=1, then (0,2) so we get [1]
	            addRange(lower-1,upper+1,res);
	            return res;
	        }
	        addRange(lower-1,nums[0],res);
	        getRange(nums,res);
	        addRange(nums[nums.length-1],upper+1,res);
	        return res;
	    }
	     public void getRange(int[] nums,List<String> res){
	           for(int i=nums[0];i<=nums[nums.length-1];i++){
	             int first=0;
	             int last=nums.length-1;
	             while(first<last){
	                 int mid=(first+last)/2;
	                 if(nums[mid]>=i){
	                     last=mid-1;
	                 }else{
	                     first=mid+1;
	                 }
	             }
	             last=(last<0||nums[last]!=i)?last+1:last;
	             if(last<nums.length&&last-1>=0&&nums[last]==i){
	                 addRange(nums[last-1],nums[last],res);
	             }
	          }
	    }
	    public void addRange(int a, int b,List<String> res){
	           if(b>a+1){
	                StringBuilder temp=new StringBuilder();
	                temp.append(a+1);
	                if(a+2<b){
	                    temp.append("->");
	                    temp.append(b-1);
	                }
	               res.add(temp.toString());
	           }
	    }
	    
  --------------------------------------------------------------------------------------------------------------------
  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
